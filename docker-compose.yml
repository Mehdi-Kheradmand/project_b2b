# docker-compose.yml

services:
  django:
    container_name: b2b_django
    build:
      context: ./
      dockerfile: Dockerfile
    command: python manage.py runserver 0.0.0.0:8000
#    command: gunicorn config.wsgi:application --bind 0.0.0.0:8000
#    command: sh -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    volumes:
      - .:/app/
    ports:
      - "8000:8000"
    environment:
      SECRET_KEY: ${SECRET_KEY}
      DEBUG: ${DEBUG}
      CELERY_BROKER_URL: amqp://guest:guest@rabbitmq:5672//
      CELERY_RESULT_BACKEND: redis://redis:6379/0
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - b2b_network

  celery:
    container_name: b2b_celery
    build:
      context: ./
      dockerfile: Dockerfile
    command: celery --app config.celery worker --loglevel=info -Q default,high_priority,low_priority
    volumes:
      - ./:/app/
    environment:
      CELERY_BROKER_URL: amqp://guest:guest@rabbitmq:5672//
      CELERY_RESULT_BACKEND: redis://redis:6379/0
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - b2b_network

  redis:
    image: redis:7.2.5-bookworm
    container_name: b2b_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - b2b_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.13.4-management
    container_name: b2b_rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - b2b_network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  redis_data:
  rabbitmq_data:

networks:
  b2b_network:
    driver: bridge
